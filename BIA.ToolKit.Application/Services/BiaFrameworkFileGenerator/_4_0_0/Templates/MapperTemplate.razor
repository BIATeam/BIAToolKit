@using BIA.ToolKit.Application.Services.BiaFrameworkFileGenerator._4_0_0.Models

@code {
    [Parameter]
    public DtoModel Model { get; set; }
}
@{
    var baseMapperClass = Model.IsTeamType ? "TTeamMapper" : "BaseMapper";
    var baseKeyType = Model.IsTeamType ? string.Empty : $", {Model.BaseKeyType}";
}
// <copyright file="@(Model.MapperName).cs" company="@(Model.CompanyName)">
//     Copyright (c) @(Model.CompanyName). All rights reserved.
// </copyright>

namespace @(Model.CompanyName).@(Model.ProjectName).Domain.@(Model.DomainName).Mappers
{
    using System;
    @if (Model.HasCollectionOptions)
    {
<text>    using System.Collections.Generic;
</text>
    }
    using System.Linq;
    using System.Linq.Expressions;
    @if (Model.IsTeamType)
    {
<text>    using System.Security.Principal;
    using BIA.Net.Core.Common.Extensions;
</text>
    }
    using BIA.Net.Core.Domain;
    using BIA.Net.Core.Domain.Dto.Base;
    @if (Model.HasOptions)
    {
<text>    using BIA.Net.Core.Domain.Dto.Option;
</text>
    }
    using @Model.EntityNamespace;
    using @(Model.CompanyName).@(Model.ProjectName).Domain.Dto.@(Model.DomainName);
    @if (Model.IsTeamType)
    {
<text>    using @(Model.CompanyName).@(Model.ProjectName).Domain.User.Mappers;
</text>
    }

    /// <summary>
    /// The mapper used for @(Model.EntityName).
    /// </summary>
    public class @(Model.EntityName)Mapper : @(baseMapperClass)@((MarkupString)($"<{Model.DtoName}, {Model.EntityName}{baseKeyType}>"))
    {
        @if (Model.IsTeamType)
        {
<text>        /// <summary>
        @((MarkupString)($"{Environment.NewLine}        /// Initializes a new instance of the <see cref=\"{Model.EntityName}Mapper\"/> class."))
        /// </summary>
        @((MarkupString)("/// <param name=\"principal\">The principal.</param>"))
        public @(Model.EntityName)Mapper(IPrincipal principal)
            : base(principal)
        {
        }

        @((MarkupString)("/// <inheritdoc/>"))
        public override int TeamType => base.TeamType;

</text>
        }
        @((MarkupString)("        /// <inheritdoc/>"))
        public override ExpressionCollection@((MarkupString)($"<{Model.EntityName}>")) ExpressionCollection
        {
            // It is not necessary to implement this function if you to not use the mapper for filtered list. In BIADemo it is use only for Calc SpreadSheet.
            get
            {
                return new ExpressionCollection@((MarkupString)($"<{Model.EntityName}>"))
                {
                    @foreach (var property in Model.Properties)
                    {
                        if(!property.IsOption && !property.IsOptionCollection)
                        {
<text>                    { HeaderName.@property.MappingName, x => x.@property.EntityCompositeName },
</text>
                        }
                        if (property.IsOptionCollection)
                        {
<text>                    { HeaderName.@property.MappingName, x => x.@(property.EntityCompositeName).Select(y => y.@property.OptionDisplayProperty).OrderBy(y => y) },
</text>
                        }
                        if(property.IsOption)
                        {
<text>                    { HeaderName.@property.MappingName, x => x.@property.EntityCompositeName != null ? x.@(property.EntityCompositeName).@property.OptionDisplayProperty : null },
</text>
                        }
                    }
                };
            }
        }

        @((MarkupString)("/// <inheritdoc/>"))
        public override void DtoToEntity(@(Model.DtoName) dto, @(Model.EntityName) entity)
        {
            entity ??= new @(Model.EntityName)();

            @if (Model.IsTeamType)
            {
<text>            base.DtoToEntity(dto, entity);
</text>
            }
            @foreach (var property in Model.Properties)
            {
                if (!property.IsOption && !property.IsOptionCollection)
                {
<text>            entity.@(property.EntityCompositeName) = dto.@(property.MappingName);
</text>
                }
                else if (property.IsOption)
                {
<text>            entity.@(property.OptionEntityIdPropertyComposite) = dto.@(property.MappingName).Id;
</text>
                }
                else if (property.IsOptionCollection)
                {
<text>            if (dto.@(property.MappingName) != null && dto.@(property.MappingName).Count != 0)
            {
                foreach (var optionDto in dto.@(property.MappingName).Where(x => x.DtoState == DtoState.Deleted))
                {
                    var entityToRemove = entity.@(property.EntityCompositeName).FirstOrDefault(x => x.@(property.OptionIdProperty) == optionDto.Id);
                    if (entityToRemove != null)
                    {
                        entity.@(property.EntityCompositeName).Remove(entityToRemove);
                    }
                }

                entity.@(property.OptionRelationPropertyComposite) = entity.@(property.OptionRelationPropertyComposite) ?? @((MarkupString)($"new List<{property.OptionRelationType}>()"));
                foreach (var optionDto in dto.@(property.MappingName).Where(x => x.DtoState == DtoState.Added))
                {
                    entity.@(property.OptionRelationPropertyComposite).Add(new @(property.OptionRelationType)
                    {
                        @(property.OptionRelationFirstIdProperty) = dto.Id,
                        @(property.OptionRelationSecondIdProperty) = optionDto.Id,
                    });
                }
            }

</text>
                }
            }
        }

        @((MarkupString)("/// <inheritdoc/>"))
        public override Expression@((MarkupString)($"<Func<{Model.EntityName}, {Model.DtoName}>>")) EntityToDto()
        {
            return @((MarkupString)(Model.IsTeamType ? "base.EntityToDto().CombineMapping(" : string.Empty))entity => new @(Model.DtoName)
            {
                @foreach (var property in Model.Properties)
                {
                    if (!property.IsOption && !property.IsOptionCollection)
                    {
                @((MarkupString)($"                {property.MappingName} = entity.{property.EntityCompositeName},{Environment.NewLine}"))
                    }
                    else if (property.IsOption)
                    {
<text>@($"                {property.MappingName} = entity.{property.EntityCompositeName} != null ?")
                  new OptionDto { Id = entity.@(property.EntityCompositeName).@(property.OptionIdProperty), Display = entity.@(property.EntityCompositeName).@(property.OptionDisplayProperty) } :
                  null,
</text>
                    }
                    else if (property.IsOptionCollection)
                    {
<text>@($"                {property.MappingName} = entity.{property.EntityCompositeName}")
                .Select(x => new OptionDto { Id = x.@(property.OptionIdProperty), Display = x.@(property.OptionDisplayProperty) })
                .OrderBy(x => x.Display)
                .ToList(),
</text>
                    }
                }
                @if (Model.IsTeamType)
                {
<text>                TeamTypeId = this.TeamType,
</text>
                }
            @((MarkupString)(Model.IsTeamType ? "            });" : "            };"))
        }

        @((MarkupString)("/// <inheritdoc/>"))
        public override Func@((MarkupString)($"<{Model.DtoName}, object[]>")) DtoToRecord(List@((MarkupString)("<string>")) headerNames = null)
        {
            return x => (new object[]
            {
                @foreach (var property in Model.Properties.Where(p => !p.IsOption && !p.IsOptionCollection))
                {
                @((MarkupString)($"                {property.GenerateMapperCSV()}{Environment.NewLine}"))
                }
            });
        }

        /// <summary>
        /// Header Names.
        /// </summary>
        private struct HeaderName
        {
            @foreach(var property in Model.Properties)
            {
<text>            /// <summary>
            /// Header Name @property.MappingName.
            /// </summary>
            public const string @property.MappingName = @((MarkupString)($"\"{string.Concat(char.ToLower(property.MappingName[0]), property.MappingName.Substring(1, property.MappingName.Length - 1))}\""));
</text>
                if(property != Model.Properties.Last())
                {
                    @((MarkupString)Environment.NewLine)
                }
            }
        }
    }
}