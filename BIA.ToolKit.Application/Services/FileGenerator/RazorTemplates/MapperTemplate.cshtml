@using RazorLight
@using BIA.ToolKit.Application.Services.FileGenerator.RazorModels
@inherits RazorLight.TemplatePage<MapperModel>

// <copyright file="@(Model.MapperName).cs" company="@(Model.CompanyName)">
//     Copyright (c) @(Model.CompanyName). All rights reserved.
// </copyright>

namespace @(Model.EntityNamespace)
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;
    using BIA.Net.Core.Domain;
    using BIA.Net.Core.Domain.Dto.Base;
    @if (Model.HasOptions)
    {
    @:using BIA.Net.Core.Domain.Dto.Option; 
    }
    using @(Model.CompanyName).@(Model.ProjectName).Domain.Dto.@(Model.DomainName);

    /// <summary>
    /// The mapper used for @(Model.EntityName).
    /// </summary>
    public class @(Model.EntityName)Mapper : BaseMapper<@(Model.DtoName), @(Model.EntityName), @(Model.BaseKeyType)>
    {
        /// <inheritdoc cref="BaseMapper{TDto,TEntity}.DtoToEntity"/>
        public override void DtoToEntity(@(Model.DtoName) dto, @(Model.EntityName) entity)
        {
            if (entity == null)
            {
                entity = new @(Model.EntityName)();
            }

            @foreach (var property in Model.Properties)
            {
                if(!property.IsOption && !property.IsOptionCollection)
                {
            @:entity.@(property.EntityCompositeName) = dto.@(property.MappingName);
                }
                else if(property.IsOptionCollection)
                {
            @:if (dto.@(property.MappingName) != null && dto.@(property.MappingName).Any())
            @:{
            @:    foreach (var optionDto in dto.@(property.MappingName).Where(x => x.DtoState == DtoState.Deleted))
            @:    {
            @:        var entityToRemove = entity.@(property.MappingName).FirstOrDefault(x => x.Id == optionDto.Id);
            @:        if (entityToRemove != null)
            @:        {
            @:            entity.@(property.EntityCompositeName).Remove(entityToRemove);
            @:        }
            @:    }
@:
            @:    foreach (var optionDto in dto.@(property.MappingName).Where(x => x.DtoState == DtoState.Added))
            @:    {
            @:        entity.@(property.EntityCompositeName).Add(new @(property.OptionType)
            @:        {
            @:            @(property.OptionDisplayProperty) = optionDto.Display,
@:
            @:            // TODO complete mapping
            @:        });
            @:    }
            @:}
                }
            }
        }

        /// <inheritdoc cref="BaseMapper{TDto,TEntity}.EntityToDto"/>
        public override Expression<Func<@(Model.EntityName), @(Model.DtoName)>> EntityToDto()
        {
            return entity => new @(Model.DtoName)
            {
                @foreach (var property in Model.Properties)
                {
                    if(!property.IsOption && !property.IsOptionCollection)
                    {
                @:@(property.MappingName) = entity.@(property.EntityCompositeName),
                    }
                    else if(property.IsOption)
                    {
                @:@(property.MappingName) = entity.@(property.EntityCompositeName) != null ?
                @:  new OptionDto { Id = entity.@(property.EntityCompositeName).Id, Display = entity.@(property.EntityCompositeName).@(property.OptionDisplayProperty) } :
                @:  null,
                    }
                    else if(property.IsOptionCollection)
                    {
                @:@(property.MappingName) = entity.@(property.EntityCompositeName)
                @:.Select(x => new OptionDto { Id = x.Id, Display = x.@(property.OptionDisplayProperty) })
                @:.OrderBy(x => x.Display)
                @:.ToList(),
                    }
                }
            };
        }
    }
}