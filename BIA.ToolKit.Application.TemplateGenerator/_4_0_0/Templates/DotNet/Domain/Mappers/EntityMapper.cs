// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace BIA.ToolKit.Application.TemplateGenerator._4_0_0.Templates.DotNet.Domain.Mappers
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using BIA.ToolKit.Application.TemplateGenerator._4_0_0.Models.DotNet.DomainDto;
    using BIA.ToolKit.Application.TemplateGenerator._4_0_0.Mocks.DotNet.DomainDto;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class EntityMapper : EntityMapperBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 11 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 
var ModelInstance = Model ?? new EntityDtoMock(); 
var baseMapperClass = ModelInstance.IsTeamType ? "TTeamMapper" : "BaseMapper";
var baseKeyType = ModelInstance.IsTeamType ? string.Empty : $", {ModelInstance.BaseKeyType}";

            
            #line default
            #line hidden
            this.Write("// <copyright file=\"");
            
            #line 16 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.MapperName));
            
            #line default
            #line hidden
            this.Write(".cs\" company=\"");
            
            #line 16 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.CompanyName));
            
            #line default
            #line hidden
            this.Write("\">\r\n//     Copyright (c) ");
            
            #line 17 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.CompanyName));
            
            #line default
            #line hidden
            this.Write(". All rights reserved.\r\n// </copyright>\r\n\r\nnamespace ");
            
            #line 20 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.CompanyName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 20 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.ProjectName));
            
            #line default
            #line hidden
            this.Write(".Domain.");
            
            #line 20 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DomainName));
            
            #line default
            #line hidden
            this.Write(".Mappers\r\n{\r\n    using System;\r\n");
            
            #line 23 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.HasCollectionOptions) { 
            
            #line default
            #line hidden
            this.Write("    using System.Collections.Generic;\r\n");
            
            #line 25 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    using System.Linq;\r\n    using System.Linq.Expressions;\r\n");
            
            #line 28 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.IsTeamType) { 
            
            #line default
            #line hidden
            this.Write("    using System.Security.Principal;\r\n    using BIA.Net.Core.Common.Extensions;\r\n" +
                    "");
            
            #line 31 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    using BIA.Net.Core.Domain;\r\n    using BIA.Net.Core.Domain.Dto.Base;\r\n");
            
            #line 34 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.HasOptions) { 
            
            #line default
            #line hidden
            this.Write("    using BIA.Net.Core.Domain.Dto.Option;\r\n");
            
            #line 36 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    using ");
            
            #line 37 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n    using ");
            
            #line 38 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.CompanyName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 38 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.ProjectName));
            
            #line default
            #line hidden
            this.Write(".Domain.Dto.");
            
            #line 38 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DomainName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 39 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.IsTeamType) { 
            
            #line default
            #line hidden
            this.Write("    using ");
            
            #line 40 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.CompanyName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 40 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.ProjectName));
            
            #line default
            #line hidden
            this.Write(".Domain.User.Mappers;\r\n");
            
            #line 41 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    /// <summary>\r\n    /// The mapper used for ");
            
            #line 44 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write(".\r\n    /// </summary>\r\n    public class ");
            
            #line 46 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write("Mapper : ");
            
            #line 46 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseMapperClass));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 46 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DtoName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 46 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            
            #line 46 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseKeyType));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n");
            
            #line 48 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.IsTeamType) { 
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Initializes a new instance of the <see cref=\"");
            
            #line 50 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write("Mapper\"/> class.\r\n        /// </summary>\r\n        /// <param name=\"principal\">The" +
                    " principal.</param>\r\n        public ");
            
            #line 53 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write("Mapper(IPrincipal principal)\r\n            : base(principal)\r\n        {\r\n        }" +
                    "\r\n\r\n        /// <inheritdoc/>\r\n        public override int TeamType => base.Team" +
                    "Type;\r\n");
            
            #line 60 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        /// <inheritdoc/>\r\n        public override ExpressionCollection<");
            
            #line 62 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write(@"> ExpressionCollection
        {
            // It is not necessary to implement this function if you do not use the mapper for filtered list.
            // In BIADemo it is used only for Calc SpreadSheet.
            get
            {
                return new ExpressionCollection<");
            
            #line 68 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write(">\r\n                {\r\n");
            
            #line 70 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 foreach (var property in ModelInstance.Properties) { 
       if (!property.IsOption && !property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("                    { HeaderName.");
            
            #line 72 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(", x => x.");
            
            #line 72 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(" },\r\n");
            
            #line 73 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       }
       if (property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("                    { HeaderName.");
            
            #line 75 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(", x => x.");
            
            #line 75 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".Select(y => y.");
            
            #line 75 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionDisplayProperty));
            
            #line default
            #line hidden
            this.Write(").OrderBy(y => y) },\r\n");
            
            #line 76 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       }
       if (property.IsOption) { 
            
            #line default
            #line hidden
            this.Write("                    { HeaderName.");
            
            #line 78 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(", x => x.");
            
            #line 78 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(" != null ? x.");
            
            #line 78 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 78 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionDisplayProperty));
            
            #line default
            #line hidden
            this.Write(" : null },\r\n");
            
            #line 79 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } 
} 
            
            #line default
            #line hidden
            this.Write("                };\r\n            }\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n      " +
                    "  public override void DtoToEntity(");
            
            #line 86 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DtoName));
            
            #line default
            #line hidden
            this.Write(" dto, ");
            
            #line 86 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write(" entity)\r\n        {\r\n            entity ??= new ");
            
            #line 88 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write("();\r\n\r\n");
            
            #line 90 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.IsTeamType) { 
            
            #line default
            #line hidden
            this.Write("            base.DtoToEntity(dto, entity);\r\n");
            
            #line 92 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            
            #line 93 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 foreach (var property in ModelInstance.Properties) {
       if (!property.IsOption && !property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("            entity.");
            
            #line 95 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(" = dto.");
            
            #line 95 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 96 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } else if (property.IsOption) { 
            
            #line default
            #line hidden
            this.Write("            entity.");
            
            #line 97 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionEntityIdPropertyComposite));
            
            #line default
            #line hidden
            this.Write(" = dto.");
            
            #line 97 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(".Id;\r\n");
            
            #line 98 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } else if (property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("            if (dto.");
            
            #line 99 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(" != null && dto.");
            
            #line 99 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(".Count != 0)\r\n            {\r\n                foreach (var optionDto in dto.");
            
            #line 101 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(".Where(x => x.DtoState == DtoState.Deleted))\r\n                {\r\n                " +
                    "    var entityToRemove = entity.");
            
            #line 103 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".FirstOrDefault(x => x.");
            
            #line 103 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionIdProperty));
            
            #line default
            #line hidden
            this.Write(" == optionDto.Id);\r\n                    if (entityToRemove != null)\r\n            " +
                    "        {\r\n                        entity.");
            
            #line 106 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".Remove(entityToRemove);\r\n                    }\r\n                }\r\n\r\n           " +
                    "     entity.");
            
            #line 110 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationPropertyComposite));
            
            #line default
            #line hidden
            this.Write(" = entity.");
            
            #line 110 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationPropertyComposite));
            
            #line default
            #line hidden
            this.Write(" ?? new List<");
            
            #line 110 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationType));
            
            #line default
            #line hidden
            this.Write(">();\r\n                foreach (var optionDto in dto.");
            
            #line 111 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(".Where(x => x.DtoState == DtoState.Added))\r\n                {\r\n                  " +
                    "  entity.");
            
            #line 113 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationPropertyComposite));
            
            #line default
            #line hidden
            this.Write(".Add(new ");
            
            #line 113 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationType));
            
            #line default
            #line hidden
            this.Write("\r\n                    {\r\n                        ");
            
            #line 115 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationFirstIdProperty));
            
            #line default
            #line hidden
            this.Write(" = dto.Id,\r\n                        ");
            
            #line 116 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionRelationSecondIdProperty));
            
            #line default
            #line hidden
            this.Write(" = optionDto.Id,\r\n                    });\r\n                }\r\n            }\r\n");
            
            #line 120 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } 
} 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        /// <inheritdoc/>\r\n        public override Expression<Func<");
            
            #line 125 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.EntityName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 125 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DtoName));
            
            #line default
            #line hidden
            this.Write(">> EntityToDto()\r\n        {\r\n            return ");
            
            #line 127 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.IsTeamType ? "base.EntityToDto().CombineMapping(" : ""));
            
            #line default
            #line hidden
            this.Write("entity => new ");
            
            #line 127 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DtoName));
            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n");
            
            #line 129 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 foreach (var property in ModelInstance.Properties) {
       if (!property.IsOption && !property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 131 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(" = entity.");
            
            #line 131 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 132 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } else if (property.IsOption) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 133 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(" = entity.");
            
            #line 133 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(" != null ? \r\n                  new OptionDto { Id = entity.");
            
            #line 134 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 134 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionIdProperty));
            
            #line default
            #line hidden
            this.Write(", Display = entity.");
            
            #line 134 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 134 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionDisplayProperty));
            
            #line default
            #line hidden
            this.Write(" } :\r\n                  null,\r\n");
            
            #line 136 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       } else if (property.IsOptionCollection) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 137 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(" = entity.");
            
            #line 137 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.EntityCompositeName));
            
            #line default
            #line hidden
            this.Write("\r\n                .Select(x => new OptionDto { Id = x.");
            
            #line 138 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionIdProperty));
            
            #line default
            #line hidden
            this.Write(", Display = x.");
            
            #line 138 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.OptionDisplayProperty));
            
            #line default
            #line hidden
            this.Write(" })\r\n                .OrderBy(x => x.Display)\r\n                .ToList(),\r\n");
            
            #line 141 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
       }
} 
            
            #line default
            #line hidden
            
            #line 143 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 if (ModelInstance.IsTeamType) { 
            
            #line default
            #line hidden
            this.Write("                TeamTypeId = this.TeamType,\r\n");
            
            #line 145 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 146 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.IsTeamType ? ")" : ""));
            
            #line default
            #line hidden
            this.Write(";\r\n        }\r\n\r\n        /// <inheritdoc/>\r\n        public override Func<");
            
            #line 150 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelInstance.DtoName));
            
            #line default
            #line hidden
            this.Write(", object[]> DtoToRecord(List<string> headerNames = null)\r\n        {\r\n            " +
                    "return x => (new object[]\r\n            {\r\n");
            
            #line 154 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 foreach (var property in ModelInstance.Properties.Where(p => !p.IsOption && !p.IsOptionCollection)) { 
            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 155 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.GenerateMapperCSV()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 156 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            });\r\n        }\r\n\r\n        /// <summary>\r\n        /// Header Names.\r\n " +
                    "       /// </summary>\r\n        private struct HeaderName\r\n        {\r\n");
            
            #line 165 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 foreach (var property in ModelInstance.Properties) { 
            
            #line default
            #line hidden
            this.Write("            /// <summary>\r\n            /// Header Name ");
            
            #line 167 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(".\r\n            /// </summary>\r\n            public const string ");
            
            #line 169 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.MappingName));
            
            #line default
            #line hidden
            this.Write(" = \"");
            
            #line 169 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Concat(char.ToLower(property.MappingName[0]), property.MappingName.Substring(1))));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 170 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\sources\Github\BIAToolKit\BIA.ToolKit.Application.TemplateGenerator\_4_0_0\Templates\DotNet\Domain\Mappers\EntityMapper.tt"

private global::BIA.ToolKit.Application.TemplateGenerator._4_0_0.Models.DotNet.DomainDto.EntityDtoModel _ModelField;

/// <summary>
/// Access the Model parameter of the template.
/// </summary>
private global::BIA.ToolKit.Application.TemplateGenerator._4_0_0.Models.DotNet.DomainDto.EntityDtoModel Model
{
    get
    {
        return this._ModelField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ModelValueAcquired = false;
if (this.Session.ContainsKey("Model"))
{
    this._ModelField = ((global::BIA.ToolKit.Application.TemplateGenerator._4_0_0.Models.DotNet.DomainDto.EntityDtoModel)(this.Session["Model"]));
    ModelValueAcquired = true;
}
if ((ModelValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Model");
    if ((data != null))
    {
        this._ModelField = ((global::BIA.ToolKit.Application.TemplateGenerator._4_0_0.Models.DotNet.DomainDto.EntityDtoModel)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class EntityMapperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
