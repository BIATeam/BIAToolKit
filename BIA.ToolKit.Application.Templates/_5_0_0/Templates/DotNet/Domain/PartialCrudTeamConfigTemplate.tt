<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BIA.ToolKit.Application.Templates" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Models" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Mocks" #>
<#@ output extension=".cs" #>
<#@ parameter type="BIA.ToolKit.Application.Templates._5_0_0.Models.EntityCrudModel" name="Model" #>
<# 
var ModelInstance = Model ?? new EntityCrudMock();
if(ModelInstance.IsTeam) {
#>
            // BIAToolKit - Begin Partial TeamConfig <#= ModelInstance.EntityName #>
            new BiaTeamConfig<Team>()
            {
                TeamTypeId = (int)TeamTypeId.<#= ModelInstance.EntityName #>,
                RightPrefix = "<#= ModelInstance.EntityName #>",
                AdminRoleIds = new int[] { (int)RoleId.<#= ModelInstance.EntityName #>Admin },
<#  if(ModelInstance.HasParent) { #>
                Parents = new ImmutableListBuilder<BiaTeamParentConfig<Team>>
                {
                    new BiaTeamParentConfig<Team>
                    {
                        TeamTypeId = (int)TeamTypeId.<#= ModelInstance.ParentName #>,
                        GetParent = team => (team as <#= ModelInstance.EntityName #>).<#= ModelInstance.ParentName #>,
                    },
                }
                .ToImmutable(),
<#  } #>
            },

            // BIAToolKit - End Partial TeamConfig <#= ModelInstance.EntityName #>
<# }  #>