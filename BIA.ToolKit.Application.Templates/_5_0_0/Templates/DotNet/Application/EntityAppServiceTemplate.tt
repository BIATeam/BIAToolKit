<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BIA.ToolKit.Application.Templates" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Models" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Mocks" #>
<#@ output extension=".cs" #>
<#@ parameter type="BIA.ToolKit.Application.Templates._5_0_0.Models.EntityCrudModel" name="Model" #>
<# var ModelInstance = Model ?? new EntityCrudMock(); #>
// <copyright file="<#= ModelInstance.EntityName #>AppService.cs" company="<#= ModelInstance.CompanyName #>">
// Copyright (c) <#= ModelInstance.CompanyName #>. All rights reserved.
// </copyright>

namespace <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Application.<#= ModelInstance.DomainName #>
{
<#  if(ModelInstance.HasParent) { #>
    using System.Linq.Expressions;
<#  } #>
    using System.Security.Principal;
    using System.Threading.Tasks;
    using BIA.Net.Core.Application.Services;
    using BIA.Net.Core.Common.Exceptions;
    using BIA.Net.Core.Domain.Authentication;
    using BIA.Net.Core.Domain.Dto.Base;
    using BIA.Net.Core.Domain.Dto.User;
    using BIA.Net.Core.Domain.RepoContract;
    using BIA.Net.Core.Domain.Service;
    using BIA.Net.Core.Domain.Specification;
<#  if(ModelInstance.IsTeam) {  #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Application.User;
<#  } #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Crosscutting.Common.Enum;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.Dto.<#= ModelInstance.DomainName #>;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Entities;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Mappers;
<#  if(ModelInstance.HasParent) { #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Specifications;
<#  } #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.RepoContract;

    /// <summary>
    /// The application service used for <#= ModelInstance.EntityName.ToCamelCase() #>.
    /// </summary>
    public class <#= ModelInstance.EntityName #>AppService : CrudAppServiceBase<<#= ModelInstance.EntityName #>Dto, <#= ModelInstance.EntityName #>, <#= ModelInstance.BaseKeyType #>, PagingFilterFormatDto, <#= ModelInstance.EntityName #>Mapper>, I<#= ModelInstance.EntityName #>AppService
    {
<#  if(ModelInstance.HasAncestorTeam) { #>
        /// <summary>
        /// The current AncestorTeamId.
        /// </summary>
        private readonly int currentAncestorTeamId;

<#  } #>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= ModelInstance.EntityName #>AppService"/> class.
        /// </summary>
        /// <param name="repository">The repository.</param>
<#  if(ModelInstance.IsTeam) {  #>
        /// <param name="principal">The claims principal.</param>
        public <#= ModelInstance.EntityName #>AppService(
            ITGenericRepository<<#= ModelInstance.EntityName #>, <#= ModelInstance.BaseKeyType #>> repository,
            IPrincipal principal)
            : base(repository)
        {
<#  } else { #>
        public <#= ModelInstance.EntityName #>AppService(
            ITGenericRepository<<#= ModelInstance.EntityName #>, <#= ModelInstance.BaseKeyType #>> repository)
            : base(repository)
        {
<#  } #>
<#  if(ModelInstance.IsTeam) {  #>
            this.FiltersContext.Add(
                AccessMode.Read,
                TeamAppService.ReadSpecification<<#= ModelInstance.EntityName #>>(TeamTypeId.<#= ModelInstance.EntityName #>, principal));

            this.FiltersContext.Add(
                AccessMode.Update,
                TeamAppService.UpdateSpecification<<#= ModelInstance.EntityName #>>(TeamTypeId.<#= ModelInstance.EntityName #>, principal));
<#  } #>
<#  if(ModelInstance.HasAncestorTeam) {  #>

            var userData = (principal as BiaClaimsPrincipal).GetUserData<UserDataDto>();
            this.currentAncestorTeamId = userData != null ? userData.GetCurrentTeamId((int)TeamTypeId.<#= ModelInstance.AncestorTeamName #>) : 0;

            // For child : set the TeamId of the Ancestor that contain a team Parent
            this.FiltersContext.Add(AccessMode.Read, new DirectSpecification<<#= ModelInstance.EntityName #>>(x => x.<#= ModelInstance.AncestorTeamName #>Id == this.currentAncestorTeamId));
<#  } #>
        }
<#  if(ModelInstance.HasParent) { #>

        /// <inheritdoc/>
#pragma warning disable S1006 // Method overrides should not change parameter defaults
        public override Task<(IEnumerable<<#= ModelInstance.EntityName #>Dto> Results, int Total)> GetRangeAsync(PagingFilterFormatDto filters = null, int id = default, Specification<<#= ModelInstance.EntityName #>> specification = null, Expression<Func<<#= ModelInstance.EntityName #>, bool>> filter = null, string accessMode = "Read", string queryMode = "ReadList", string mapperMode = null, bool isReadOnlyMode = false)
#pragma warning restore S1006 // Method overrides should not change parameter defaults
        {
            specification ??= <#= ModelInstance.EntityName #>Specification.SearchGetAll(filters);
            return base.GetRangeAsync(filters, id, specification, filter, accessMode, queryMode, mapperMode, isReadOnlyMode);
        }

        /// <inheritdoc/>
#pragma warning disable S1006 // Method overrides should not change parameter defaults
        public override Task<byte[]> GetCsvAsync(PagingFilterFormatDto filters = null, int id = default, Specification<<#= ModelInstance.EntityName #>> specification = null, Expression<Func<<#= ModelInstance.EntityName #>, bool>> filter = null, string accessMode = "Read", string queryMode = "ReadList", string mapperMode = null, bool isReadOnlyMode = false)
#pragma warning restore S1006 // Method overrides should not change parameter defaults
        {
            specification ??= <#= ModelInstance.EntityName #>Specification.SearchGetAll(filters);
            return base.GetCsvAsync(filters, id, specification, filter, accessMode, queryMode, mapperMode, isReadOnlyMode);
        }
<#  } #>
<#  if(ModelInstance.HasAncestorTeam) {  #>

        /// <inheritdoc/>
        public override Task<<#= ModelInstance.EntityName #>Dto> AddAsync(<#= ModelInstance.EntityName #>Dto dto, string mapperMode = null)
        {
            dto.<#= ModelInstance.AncestorTeamName #>Id = this.currentAncestorTeamId;
            return base.AddAsync(dto, mapperMode);
        }
<#  } #>
    }
}