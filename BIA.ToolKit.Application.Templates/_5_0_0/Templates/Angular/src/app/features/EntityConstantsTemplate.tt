<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BIA.ToolKit.Application.Templates" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Models" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Mocks" #>
<#@ output extension=".ts" #>
<#@ parameter type="BIA.ToolKit.Application.Templates._5_0_0.Models.EntityCrudModel" name="Model" #>
<# var ModelInstance = Model ?? new EntityCrudMock(); #>
import { CrudConfig } from 'src/app/shared/bia-shared/feature-templates/crud-items/model/crud-config';
<#  if(ModelInstance.HasAncestorTeam) { #>
import { TeamTypeId } from 'src/app/shared/constants';
<#  } #>
import {
  <#= ModelInstance.EntityName #>,
  <#= ModelInstance.EntityName.ToCamelCase() #>FieldsConfiguration,
  <#= ModelInstance.EntityName.ToCamelCase() #>FormLayoutConfiguration,
} from './model/<#= ModelInstance.EntityName.ToKebabCase() #>';

// TODO after creation of CRUD <#= ModelInstance.EntityName #> : adapt the global configuration
export const <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration: CrudConfig<<#= ModelInstance.EntityName #>> = new CrudConfig({
  // IMPORTANT: this key should be unique in all the application.
  featureName: '<#= ModelInstance.EntityNamePlural.ToKebabCase() #>',
  fieldsConfig: <#= ModelInstance.EntityName.ToCamelCase() #>FieldsConfiguration,
  formLayoutConfig: <#= ModelInstance.EntityName.ToCamelCase() #>FormLayoutConfiguration,
  useCalcMode: true,
  useSignalR: false,
  useView: true,
<#  if(ModelInstance.HasAncestorTeam) { #>
  useViewTeamWithTypeId: TeamTypeId.<#= ModelInstance.AncestorTeamName #>, // use to filter view by teams => should know the type of team
<#  } #>
  usePopup: false,
  useSplit: false,
  useOfflineMode: false,
  useCompactMode: false,
  useVirtualScroll: false,
  // IMPORTANT: this key should be unique in all the application.
  // storeKey: 'feature-' + featureName,
  // IMPORTANT: this is the key used for the view management it should be unique in all the application (except if share same views).
  // tableStateKey: featureName + 'Grid',
});
