<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_5_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".ts" #>
import { AsyncPipe } from '@angular/common';
import { Component, Injector } from '@angular/core';
import { BiaFormComponent } from 'src/app/shared/bia-shared/components/form/bia-form/bia-form.component';
import { CrudItemImportFormComponent } from 'src/app/shared/bia-shared/feature-templates/crud-items/components/crud-item-import-form/crud-item-import-form.component';
import { CrudItemImportComponent } from 'src/app/shared/bia-shared/feature-templates/crud-items/views/crud-item-import/crud-item-import.component';
import { Permission } from 'src/app/shared/permission';
import { <#= ModelInstance.EntityName #> } from '../../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import { <#= ModelInstance.EntityName #>Service } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>.service';

@Component({
  selector: 'app-<#= ModelInstance.EntityName.ToKebabCase() #>-import',
  templateUrl:
    '../../../../<#= ModelInstance.AngularDeepRelativePath #>shared/bia-shared/feature-templates/crud-items/views/crud-item-import/crud-item-import.component.html',
  imports: [CrudItemImportFormComponent, AsyncPipe, BiaFormComponent],
})
export class <#= ModelInstance.EntityName #>ImportComponent extends CrudItemImportComponent<<#= ModelInstance.EntityName #>> {
  constructor(
    protected injector: Injector,
    private <#= ModelInstance.EntityName.ToCamelCase() #>Service: <#= ModelInstance.EntityName #>Service
  ) {
    super(injector, <#= ModelInstance.EntityName.ToCamelCase() #>Service);
    this.crudConfiguration = <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration;
    this.setPermissions();
  }

  setPermissions() {
    this.canEdit = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Update);
    this.canDelete = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Delete);
    this.canAdd = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Create);
  }

  save(toSaves: <#= ModelInstance.EntityName #>[]): void {
    this.<#= ModelInstance.EntityName.ToCamelCase() #>Service.save(toSaves);
  }
}
