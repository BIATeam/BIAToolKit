<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BIA.ToolKit.Application.Templates" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Models" #>
<#@ import namespace="BIA.ToolKit.Application.Templates._5_0_0.Mocks" #>
<#@ output extension=".ts" #>
<#@ parameter type="BIA.ToolKit.Application.Templates._5_0_0.Models.EntityCrudModel" name="Model" #>
<# var ModelInstance = Model ?? new EntityCrudMock(); #>
import { AsyncPipe, NgClass, NgIf } from '@angular/common';
import { Component, Injector, ViewChild } from '@angular/core';
import { TranslateModule } from '@ngx-translate/core';
import { PrimeTemplate } from 'primeng/api';
import { ButtonDirective } from 'primeng/button';
import { AuthService } from 'src/app/core/bia-core/services/auth.service';
import { BiaTableBehaviorControllerComponent } from 'src/app/shared/bia-shared/components/table/bia-table-behavior-controller/bia-table-behavior-controller.component';
import { BiaTableControllerComponent } from 'src/app/shared/bia-shared/components/table/bia-table-controller/bia-table-controller.component';
import { BiaTableHeaderComponent } from 'src/app/shared/bia-shared/components/table/bia-table-header/bia-table-header.component';
import { BiaTableComponent } from 'src/app/shared/bia-shared/components/table/bia-table/bia-table.component';
import { CrudItemService } from 'src/app/shared/bia-shared/feature-templates/crud-items/services/crud-item.service';
import { CrudItemsIndexComponent } from 'src/app/shared/bia-shared/feature-templates/crud-items/views/crud-items-index/crud-items-index.component';
import { Permission } from 'src/app/shared/permission';
import { <#= ModelInstance.EntityName #>TableComponent } from '../../components/<#= ModelInstance.EntityName.ToKebabCase() #>-table/<#= ModelInstance.EntityName.ToKebabCase() #>-table.component';
import { <#= ModelInstance.EntityName #> } from '../../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import { <#= ModelInstance.EntityName #>Service } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>.service';
<#  if(ModelInstance.IsTeam) { #>
import {
  BiaButtonGroupComponent,
  BiaButtonGroupItem,
} from 'src/app/shared/bia-shared/components/bia-button-group/bia-button-group.component';
<# } #>

@Component({
  selector: 'app-<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index',
  templateUrl: './<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index.component.html',
  styleUrls: ['./<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index.component.scss'],
  imports: [
    NgClass,
    PrimeTemplate,
    NgIf,
<#  if(ModelInstance.IsTeam) { #>
    BiaButtonGroupComponent,
<#  } else { #>
    ButtonDirective,
<#  } #>
    <#= ModelInstance.EntityName #>TableComponent,
    AsyncPipe,
    TranslateModule,
    BiaTableHeaderComponent,
    BiaTableControllerComponent,
    BiaTableBehaviorControllerComponent,
    BiaTableComponent,
  ],
  providers: [{ provide: CrudItemService, useExisting: <#= ModelInstance.EntityName #>Service }],
})
export class <#= ModelInstance.EntityNamePlural #>IndexComponent extends CrudItemsIndexComponent<<#= ModelInstance.EntityName #>> {
  @ViewChild(<#= ModelInstance.EntityName #>TableComponent, { static: false })
  crudItemTableComponent: <#= ModelInstance.EntityName #>TableComponent;
  // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanViewChildDeclaration
  // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanViewChildDeclaration

  constructor(
    protected injector: Injector,
    public <#= ModelInstance.EntityName.ToCamelCase() #>Service: <#= ModelInstance.EntityName #>Service,
    protected authService: AuthService
  ) {
    super(injector, <#= ModelInstance.EntityName.ToCamelCase() #>Service);
    this.crudConfiguration = <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration;
  }

  protected setPermissions() {
    this.canEdit = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Update);
    this.canDelete = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Delete);
    this.canAdd = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Create);
    this.canSave = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Save);
    this.canSelect = this.canDelete;
    // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanViewChildSet
    // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanViewChildSet
<#  if(ModelInstance.IsTeam) { #>
    // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanSelectElementChildSet
    // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanSelectElementChildSet
<#  } #>
  }

<#  if(ModelInstance.IsTeam) { #>
  checkhasAdvancedFilter() {
    this.hasAdvancedFilter = TeamAdvancedFilterDto.hasFilter(
      this.crudConfiguration.fieldsConfig.advancedFilter
    );
  }

  protected initSelectedButtonGroup() {
    this.selectedButtonGroup = [
      new BiaButtonGroupItem(
        this.translateService.instant('<#= ModelInstance.EntityName.ToCamelCase() #>.edit'),
        () => this.onEdit(this.selectedCrudItems[0].id),
        this.canEdit,
        this.selectedCrudItems.length !== 1,
        this.translateService.instant('<#= ModelInstance.EntityName.ToCamelCase() #>.edit')
      ),
      // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsChildTeamButton
      // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsChildTeamButton
      new BiaButtonGroupItem(
        this.translateService.instant('app.members'),
        () => this.onViewMembers(this.selectedCrudItems[0].id),
        this.canViewMembers,
        this.selectedCrudItems.length !== 1 ||
          !this.selectedCrudItems[0].canMemberListAccess,
        this.translateService.instant('app.members')
      ),
    ];
  }

  onClickRowData(crudItem: <#= ModelInstance.EntityName #>) {
    if (crudItem.canMemberListAccess) {
      this.onViewMembers(crudItem.id);
    }
  }

  onViewMembers(crudItemId: any) {
    if (crudItemId && crudItemId > 0) {
      this.router.navigate([crudItemId, 'members'], {
        relativeTo: this.activatedRoute,
      });
    }
  }

  onSelectedElementsChanged(crudItems: <#= ModelInstance.EntityName #>[]) {
    super.onSelectedElementsChanged(crudItems);
    if (crudItems.length === 1) {
      this.<#= ModelInstance.EntityName.ToCamelCase() #>Service.currentCrudItemId =
        crudItems[0].id;
    }
  }

  onDelete(): void {
    super.onDelete();
    this.authService.reLogin();
  }
<#  } #>

  // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsOnViewChild
  // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsOnViewChild
}
