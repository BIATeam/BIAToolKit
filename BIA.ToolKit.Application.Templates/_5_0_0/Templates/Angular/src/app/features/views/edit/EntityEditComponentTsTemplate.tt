<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_5_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".ts" #>
import { Component, Injector, OnInit } from '@angular/core';
import { SpinnerComponent } from 'src/app/shared/bia-shared/components/spinner/spinner.component';
import { CrudItemEditComponent } from 'src/app/shared/bia-shared/feature-templates/crud-items/views/crud-item-edit/crud-item-edit.component';
import { AsyncPipe, NgIf } from '@angular/common';
import { <#= ModelInstance.EntityName #>FormComponent } from '../../components/<#= ModelInstance.EntityName.ToKebabCase() #>-form/<#= ModelInstance.EntityName.ToKebabCase() #>-form.component';
import { <#= ModelInstance.EntityName #> } from '../../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import { <#= ModelInstance.EntityName #>Service } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>.service';
import { filter } from 'rxjs';
import { Permission } from 'src/app/shared/permission';
import { FormReadOnlyMode } from 'src/app/shared/bia-shared/feature-templates/crud-items/model/crud-config';
<#  if(ModelInstance.OptionItems.Any()) { #>
import { <#= ModelInstance.EntityName #>OptionsService } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>-options.service';
<#  } #>

@Component({
  selector: 'app-<#= ModelInstance.EntityName.ToKebabCase() #>-edit',
  templateUrl: './<#= ModelInstance.EntityName.ToKebabCase() #>-edit.component.html',
  imports: [NgIf, <#= ModelInstance.EntityName #>FormComponent, AsyncPipe, SpinnerComponent],
})
export class <#= ModelInstance.EntityName #>EditComponent extends CrudItemEditComponent<<#= ModelInstance.EntityName #>> implements OnInit {
  constructor(
    protected injector: Injector,
<#  if(ModelInstance.OptionItems.Any()) { #>
    protected <#= ModelInstance.EntityName.ToCamelCase() #>OptionsService: <#= ModelInstance.EntityName #>OptionsService,
<#  } #>
    public <#= ModelInstance.EntityName.ToCamelCase() #>Service: <#= ModelInstance.EntityName #>Service
  ) {
    super(injector, <#= ModelInstance.EntityName.ToCamelCase() #>Service);
    this.crudConfiguration = <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration;
  }

  ngOnInit(): void {
    super.ngOnInit();
<#  if(ModelInstance.OptionItems.Any()) { #>
    this.sub.add(
      this.biaTranslationService.currentCulture$.subscribe(() => {
        this.<#= ModelInstance.EntityName.ToCamelCase() #>OptionsService.loadAllOptions();
      })
    );
<#  } #>
  }

<#  if(ModelInstance.HasFixableParent) { #>
  protected setPermissions(): void {
    super.setPermissions();

    this.permissionSub.add(
      this.crudItemService.crudItem$
        .pipe(filter(<#= ModelInstance.EntityName.ToCamelCase() #> => !!<#= ModelInstance.EntityName.ToCamelCase() #> && Object.keys(<#= ModelInstance.EntityName.ToCamelCase() #>).length > 0))
        .subscribe(<#= ModelInstance.EntityName.ToCamelCase() #> => {
          if (
            this.crudConfiguration.isFixable === true &&
            <#= ModelInstance.EntityName.ToCamelCase() #>.isFixed === true
          ) {
            this.formReadOnlyMode = FormReadOnlyMode.on;
          }
        })
    );
  }
<# } else if (ModelInstance.IsFixable) { #>
  protected setPermissions(): void {
    super.setPermissions();

    this.canFix = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Fix);
    this.permissionSub.add(
      this.crudItemService.crudItem$
        .pipe(filter(<#= ModelInstance.EntityName.ToCamelCase() #> => !!<#= ModelInstance.EntityName.ToCamelCase() #> && Object.keys(<#= ModelInstance.EntityName.ToCamelCase() #>).length > 0))
        .subscribe(<#= ModelInstance.EntityName.ToCamelCase() #> => {
          this.formReadOnlyMode =
            this.crudConfiguration.isFixable === true && <#= ModelInstance.EntityName.ToCamelCase() #>.isFixed === true
              ? FormReadOnlyMode.on
              : FormReadOnlyMode.off;
        })
    );
  }
<#  } #>
}
