<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_6_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".ts" #>
<#  if(ModelInstance.HasReadOnlyMode) { #>
import { Component, Injector } from '@angular/core';
import { filter } from 'rxjs';
import {
  CrudItemReadComponent,
  FormReadOnlyMode,
  SpinnerComponent,
} from 'bia-ng/shared';
import { Permission } from 'src/app/shared/permission';
import { AsyncPipe, NgIf } from '@angular/common';
import { <#= ModelInstance.EntityName #>FormComponent } from '../../components/<#= ModelInstance.EntityName.ToKebabCase() #>-form/<#= ModelInstance.EntityName.ToKebabCase() #>-form.component';
import { <#= ModelInstance.EntityName #> } from '../../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import { <#= ModelInstance.EntityName #>Service } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>.service';

@Component({
  selector: 'app-<#= ModelInstance.EntityName.ToKebabCase() #>-read',
  templateUrl: './<#= ModelInstance.EntityName.ToKebabCase() #>-read.component.html',
  imports: [NgIf, <#= ModelInstance.EntityName #>FormComponent, AsyncPipe, SpinnerComponent],
})
export class <#= ModelInstance.EntityName #>ReadComponent extends CrudItemReadComponent<<#= ModelInstance.EntityName #>> {
  constructor(
    protected injector: Injector,
    public <#= ModelInstance.EntityName.ToCamelCase() #>Service: <#= ModelInstance.EntityName #>Service
  ) {
    super(injector, <#= ModelInstance.EntityName.ToCamelCase() #>Service);
    this.crudConfiguration = <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration;
  }

<#  if(ModelInstance.IsFixable) { #>
  protected setPermissions(): void {
    super.setPermissions();
    this.canFix = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Fix);
    this.permissionSub.add(
      this.crudItemService.crudItem$
        .pipe(filter(<#= ModelInstance.EntityName.ToCamelCase() #> => !!<#= ModelInstance.EntityName.ToCamelCase() #> && Object.keys(<#= ModelInstance.EntityName.ToCamelCase() #>).length > 0))
        .subscribe(<#= ModelInstance.EntityName.ToCamelCase() #> => {
          this.canEdit =
            this.crudConfiguration.isFixable === true && <#= ModelInstance.EntityName.ToCamelCase() #>.isFixed === true
              ? false
              : this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Update);

          this.formReadOnlyMode =
            this.canEdit === false &&
            this.crudConfiguration.isFixable === true &&
            <#= ModelInstance.EntityName.ToCamelCase() #>.isFixed === true
              ? FormReadOnlyMode.on
              : this.initialFormReadOnlyMode;
        })
    );
  }
<#  } #>
}
<#  } #>