<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_6_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".ts" #>
import { AsyncPipe, NgClass, NgIf } from '@angular/common';
import { Component, Injector, OnInit, ViewChild } from '@angular/core';
import { TranslateModule } from '@ngx-translate/core';
import { AuthService } from 'bia-ng/core';
import { TeamAdvancedFilterDto } from 'bia-ng/models';
import {
  BiaButtonGroupComponent,
  BiaButtonGroupItem,
  BiaTableBehaviorControllerComponent,
  BiaTableComponent,
  BiaTableControllerComponent,
  BiaTableHeaderComponent,
  CrudItemService,
  CrudItemsIndexComponent,
<#  if(ModelInstance.HasAdvancedFilter) { #>
  TeamAdvancedFilterComponent,
<#  } #>
} from 'bia-ng/shared';
import { PrimeTemplate } from 'primeng/api';
<#  if(!ModelInstance.IsTeam) { #>
import { ButtonDirective } from 'primeng/button';
<#  } #>
import { filter } from 'rxjs';
import { Permission } from 'src/app/shared/permission';
import { <#= ModelInstance.EntityName #>TableComponent } from '../../components/<#= ModelInstance.EntityName.ToKebabCase() #>-table/<#= ModelInstance.EntityName.ToKebabCase() #>-table.component';
import { <#= ModelInstance.EntityName #> } from '../../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import { <#= ModelInstance.EntityName #>Service } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>.service';
<#  if(ModelInstance.IsTeam) { #>
<#  if(ModelInstance.HasAncestorTeam) { #>
import { TeamTypeId } from 'src/app/shared/constants';
<#  } #>
<# } #>
<#  if(ModelInstance.HasOptionItems) { #>
import { <#= ModelInstance.EntityName #>OptionsService } from '../../services/<#= ModelInstance.EntityName.ToKebabCase() #>-options.service';
<#  } #>

@Component({
  selector: 'app-<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index',
  templateUrl: './<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index.component.html',
  styleUrls: ['./<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-index.component.scss'],
  imports: [
    NgClass,
    PrimeTemplate,
    NgIf,
<#  if(ModelInstance.IsTeam) { #>
    BiaButtonGroupComponent,
<#  } else { #>
    ButtonDirective,
<#  } #>
    <#= ModelInstance.EntityName #>TableComponent,
    AsyncPipe,
    TranslateModule,
<#  if(ModelInstance.HasAdvancedFilter) { #>
    TeamAdvancedFilterComponent,
<#  } #>
    BiaTableHeaderComponent,
    BiaTableControllerComponent,
    BiaTableBehaviorControllerComponent,
    BiaTableComponent,
  ],
  providers: [{ provide: CrudItemService, useExisting: <#= ModelInstance.EntityName #>Service }],
})
export class <#= ModelInstance.EntityNamePlural #>IndexComponent extends CrudItemsIndexComponent<<#= ModelInstance.EntityName #>> implements OnInit {
  @ViewChild(<#= ModelInstance.EntityName #>TableComponent, { static: false })
  crudItemTableComponent: <#= ModelInstance.EntityName #>TableComponent;

<#  if(ModelInstance.IsTeam) { #>
  // Customization for teams
  canViewMembers = false;
<#  } #>
  // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanViewChildDeclaration
  // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanViewChildDeclaration

<#  if(ModelInstance.HasAdvancedFilter) { #>
  checkhasAdvancedFilter() {
    this.hasAdvancedFilter = TeamAdvancedFilterDto.hasFilter(
      this.crudConfiguration.fieldsConfig.advancedFilter
    );
  }
<#  } #>

  constructor(
    protected injector: Injector,
    public <#= ModelInstance.EntityName.ToCamelCase() #>Service: <#= ModelInstance.EntityName #>Service,
<#  if(ModelInstance.HasOptionItems) { #>
    protected <#= ModelInstance.EntityName.ToCamelCase() #>OptionsService: <#= ModelInstance.EntityName #>OptionsService,
<#  } #>
    protected authService: AuthService
  ) {
    super(injector, <#= ModelInstance.EntityName.ToCamelCase() #>Service);
    this.crudConfiguration = <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration;
  }

<#  if(ModelInstance.HasParent) { #>
  ngOnInit(): void {
    super.ngOnInit();
<#  if(ModelInstance.IsTeam) { #>

    const <#= ModelInstance.ParentName.ToCamelCase() #>Id = this.authService.getCurrentTeam(
      TeamTypeId.<#= ModelInstance.ParentName #>
    )?.teamId;
    if (<#= ModelInstance.ParentName.ToCamelCase() #>Id) {
      this.maintenanceTeamService.<#= ModelInstance.ParentName.ToCamelCase() #>Service.currentCrudItemId =
        <#= ModelInstance.ParentName.ToCamelCase() #>Id;
<#  } #>
    this.parentDisplayItemName$ =
      this.<#= ModelInstance.EntityName.ToCamelCase() #>Service.<#= ModelInstance.ParentName.ToCamelCase() #>Service.displayItemName$;
<#  if(ModelInstance.IsTeam) { #>
    }
<#  } #>
  }
<#  } #>

  protected setPermissions() {
<#  if(!ModelInstance.HasFixableParent) { #>
    this.canEdit = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Update);
    this.canDelete = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Delete);
    this.canAdd = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Create);
<#  if(!ModelInstance.IsTeam) { #>
<#  if(ModelInstance.CanImport) { #>
    this.canSave = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Save);
<#  } #>
    this.canSelect = this.canDelete;
<#  } #>
<#  if(ModelInstance.IsFixable) { #>
    this.canFix = this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Fix);
<#  } #>
    // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanViewChildSet
    // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanViewChildSet
<#  if(ModelInstance.IsTeam) { #>
    this.canViewMembers = this.authService.hasPermission(
      Permission.<#= ModelInstance.EntityName #>_Member_List_Access
    );
    this.canSelect =
      // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanSelectElementChildSet
      // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanSelectElementChildSet
      this.canViewMembers ||
      this.canDelete;
<#  } #>
<#  } else { #>
    // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsCanViewChildSet
    // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsCanViewChildSet

    super.setPermissions();

    this.permissionSub.add(
      this.<#= ModelInstance.EntityName.ToCamelCase() #>Service.<#= ModelInstance.ParentName.ToCamelCase() #>Service.crudItem$
        .pipe(filter(<#= ModelInstance.ParentName.ToCamelCase() #> => !!<#= ModelInstance.ParentName.ToCamelCase() #> && Object.keys(<#= ModelInstance.ParentName.ToCamelCase() #>).length > 0))
        .subscribe(<#= ModelInstance.ParentName.ToCamelCase() #> => {
          this.isParentFixed = <#= ModelInstance.ParentName.ToCamelCase() #>.isFixed === true;

          this.canEdit =
            <#= ModelInstance.ParentName.ToCamelCase() #>.isFixed === false &&
            this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Update);
          this.canDelete =
            <#= ModelInstance.ParentName.ToCamelCase() #>.isFixed === false &&
            this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Delete);
          this.canAdd =
            <#= ModelInstance.ParentName.ToCamelCase() #>.isFixed === false &&
            this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Create);
          this.canSave =
            <#= ModelInstance.ParentName.ToCamelCase() #>.isFixed === false &&
            this.authService.hasPermission(Permission.<#= ModelInstance.EntityName #>_Save);

          this.canSelect = this.canDelete;
        })
    );
<#  } #>
  }

<#  if(ModelInstance.IsTeam) { #>
  protected initSelectedButtonGroup() {
    this.selectedButtonGroup = [
      new BiaButtonGroupItem(
        this.translateService.instant('<#= ModelInstance.EntityName.ToCamelCase() #>.edit'),
        () => this.onEdit(this.selectedCrudItems[0].id),
        this.canEdit,
        this.selectedCrudItems.length !== 1,
        this.translateService.instant('<#= ModelInstance.EntityName.ToCamelCase() #>.edit')
      ),
      // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsChildTeamButton
      // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsChildTeamButton
      new BiaButtonGroupItem(
        this.translateService.instant('app.members'),
        () => this.onViewMembers(this.selectedCrudItems[0].id),
        this.canViewMembers,
        this.selectedCrudItems.length !== 1 ||
          !this.selectedCrudItems[0].canMemberListAccess,
        this.translateService.instant('app.members')
      ),
    ];
  }

  onClickRowData(crudItem: <#= ModelInstance.EntityName #>) {
    if (crudItem.canMemberListAccess) {
      this.onViewMembers(crudItem.id);
    }
  }

  onViewMembers(crudItemId: any) {
    if (crudItemId && crudItemId > 0) {
      this.router.navigate([crudItemId, 'members'], {
        relativeTo: this.activatedRoute,
      });
    }
  }

  onSelectedElementsChanged(crudItems: <#= ModelInstance.EntityName #>[]) {
    super.onSelectedElementsChanged(crudItems);
    if (crudItems.length === 1) {
      this.<#= ModelInstance.EntityName.ToCamelCase() #>Service.currentCrudItemId = crudItems[0].id;
    }
  }

  onDelete(): void {
    super.onDelete();
    this.authService.reLogin();
  }
<#  } #>

  // BIAToolKit - Begin <#= ModelInstance.EntityName #>IndexTsOnViewChild
  // BIAToolKit - End <#= ModelInstance.EntityName #>IndexTsOnViewChild
}
