<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_6_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".ts" #>
import {
  Action,
  combineReducers,
  createFeatureSelector,
  createSelector,
} from '@ngrx/store';
import { <#= ModelInstance.EntityName #> } from '../model/<#= ModelInstance.EntityName.ToKebabCase() #>';
import { <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration } from '../<#= ModelInstance.EntityName.ToKebabCase() #>.constants';
import * as from<#= ModelInstance.EntityNamePlural #> from './<#= ModelInstance.EntityNamePlural.ToKebabCase() #>-reducer';

export namespace Feature<#= ModelInstance.EntityNamePlural #>Store {
  export interface <#= ModelInstance.EntityNamePlural #>State {
    <#= ModelInstance.EntityNamePlural.ToCamelCase() #>: from<#= ModelInstance.EntityNamePlural #>.State;
  }

  /** Provide reducers with AoT-compilation compliance */
  export function reducers(state: <#= ModelInstance.EntityNamePlural #>State | undefined, action: Action) {
    return combineReducers({
      <#= ModelInstance.EntityNamePlural.ToCamelCase() #>: from<#= ModelInstance.EntityNamePlural #>.<#= ModelInstance.EntityName.ToCamelCase() #>Reducers,
    })(state, action);
  }

  /**
   * The createFeatureSelector function selects a piece of state from the root of the state object.
   * This is used for selecting feature states that are loaded eagerly or lazily.
   */

  export const get<#= ModelInstance.EntityNamePlural #>State = createFeatureSelector<<#= ModelInstance.EntityNamePlural #>State>(
    <#= ModelInstance.EntityName.ToCamelCase() #>CRUDConfiguration.storeKey
  );

  export const get<#= ModelInstance.EntityNamePlural #>EntitiesState = createSelector(
    get<#= ModelInstance.EntityNamePlural #>State,
    state => state.<#= ModelInstance.EntityNamePlural.ToCamelCase() #>
  );

  export const get<#= ModelInstance.EntityNamePlural #>TotalCount = createSelector(
    get<#= ModelInstance.EntityNamePlural #>EntitiesState,
    state => state.totalCount
  );

  export const getCurrent<#= ModelInstance.EntityName #> = createSelector(
    get<#= ModelInstance.EntityNamePlural #>EntitiesState,
    state => state.currentItem ?? <<#= ModelInstance.EntityName #>>{<# if(ModelInstance.BaseKeyType == "string" || ModelInstance.BaseKeyType == "Guid") { #> id: '' <# } #>}
  );

  export const getLastLazyLoadEvent = createSelector(
    get<#= ModelInstance.EntityNamePlural #>EntitiesState,
    state => state.lastLazyLoadEvent
  );

  export const get<#= ModelInstance.EntityName #>LoadingGet = createSelector(
    get<#= ModelInstance.EntityNamePlural #>EntitiesState,
    state => state.loadingGet
  );

  export const get<#= ModelInstance.EntityName #>LoadingGetAll = createSelector(
    get<#= ModelInstance.EntityNamePlural #>EntitiesState,
    state => state.loadingGetAll
  );

  export const { selectAll: getAll<#= ModelInstance.EntityNamePlural #> } =
    from<#= ModelInstance.EntityNamePlural #>.<#= ModelInstance.EntityNamePlural.ToCamelCase() #>Adapter.getSelectors(get<#= ModelInstance.EntityNamePlural #>EntitiesState);

  export const get<#= ModelInstance.EntityName #>ById = (id: number) =>
    createSelector(get<#= ModelInstance.EntityNamePlural #>EntitiesState, from<#= ModelInstance.EntityNamePlural #>.get<#= ModelInstance.EntityName #>ById(id));
}

