<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(T4Includes_6_0_0)\TemplateCrud.ttinclude" #>
<#@ output extension=".cs" #>
// <copyright file="<#= ModelInstance.EntityName #>AppService.cs" company="<#= ModelInstance.CompanyName #>">
// Copyright (c) <#= ModelInstance.CompanyName #>. All rights reserved.
// </copyright>

namespace <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Application.<#= ModelInstance.DomainName #>
{
<#  if(ModelInstance.IsTeam || ModelInstance.HasParent) { #>
    using System.Linq.Expressions;
<#  } #>
    using System.Security.Principal;
    using System.Threading.Tasks;
    using BIA.Net.Core.Application.Services;
<#  if(ModelInstance.HasAncestorTeam || ModelInstance.IsFixable) { #>
    using BIA.Net.Core.Common.Exceptions;
<#  } #>
<#  if(ModelInstance.HasAncestorTeam) { #>
    using BIA.Net.Core.Domain.Authentication;
<#  } #>
    using BIA.Net.Core.Domain.Dto.Base;
    using BIA.Net.Core.Domain.RepoContract;
    using BIA.Net.Core.Domain.Service;
    using BIA.Net.Core.Domain.Specification;
<#  if(ModelInstance.IsTeam) { #>
    using BIA.Net.Core.Domain.User.Specifications;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Application.User;
<#  } #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Crosscutting.Common.Enum;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.Dto.<#= ModelInstance.DomainName #>;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.Dto.User;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Entities;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Mappers;
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.RepoContract;
<#  if(!ModelInstance.IsTeam && ModelInstance.HasParent) { #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.<#= ModelInstance.DomainName #>.Specifications;
<#  } #>
<#  if(ModelInstance.IsTeam) { #>
    using <#= ModelInstance.CompanyName #>.<#= ModelInstance.ProjectName #>.Domain.User;
<#  } #>

    /// <summary>
    /// The application service used for <#= ModelInstance.EntityName.ToCamelCase() #>.
    /// </summary>
    public class <#= ModelInstance.EntityName #>AppService : CrudAppServiceBase<<#= ModelInstance.EntityName #>Dto, <#= ModelInstance.EntityName #>, <#= ModelInstance.BaseKeyType #>, PagingFilterFormatDto, <#= ModelInstance.EntityName #>Mapper>, I<#= ModelInstance.EntityName #>AppService
    {
<#  if(ModelInstance.HasAncestorTeam) { #>
        /// <summary>
        /// The current AncestorTeamId.
        /// </summary>
        private readonly int currentAncestorTeamId;

<#  } #>
<#  if(ModelInstance.HasCustomRepository) { #>
        /// <summary>
        /// The repository.
        /// </summary>
        private readonly I<#= ModelInstance.EntityName #>Repository repository;

<#  } #>
<#  if(ModelInstance.HasFixableParent) { #>
        /// <summary>
        /// The <#= ModelInstance.ParentName.ToCamelCase() #> repository.
        /// </summary>
        private readonly ITGenericRepository<<#= ModelInstance.ParentName #>, int> <#= ModelInstance.ParentName.ToCamelCase() #>Repository;

<#  } #>
<#  if(ModelInstance.IsFixable) { #>
        // BIAToolKit - Begin FixedChildrenRepositoryDefinition<#= ModelInstance.EntityName #>
        // BIAToolKit - End FixedChildrenRepositoryDefinition<#= ModelInstance.EntityName #>
#pragma warning disable SA1515 // Single-line comment should be preceded by blank line
#pragma warning disable SA1611 // Element parameters should be documented
<#  } #>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= ModelInstance.EntityName #>AppService"/> class.
        /// </summary>
        /// <param name="repository">The repository.</param>
<#  if(ModelInstance.HasFixableParent) { #>
        /// <param name="<#= ModelInstance.ParentName.ToCamelCase() #>Repository">The <#= ModelInstance.ParentName.ToCamelCase() #> repository.</param>
<#  } #>
<#  if(ModelInstance.IsFixable) { #>
        // BIAToolKit - Begin FixedChildrenRepositoryConstructorParam<#= ModelInstance.EntityName #>
        // BIAToolKit - End FixedChildrenRepositoryConstructorParam<#= ModelInstance.EntityName #>
<#  } #>
        /// <param name="principal">The claims principal.</param>
        public <#= ModelInstance.EntityName #>AppService(
<#  if(!ModelInstance.HasCustomRepository) { #>
            ITGenericRepository<<#= ModelInstance.EntityName #>, <#= ModelInstance.BaseKeyType #>> repository,
<#  } else { #>
            I<#= ModelInstance.EntityName #>Repository repository,
<#  } #>
<#  if(ModelInstance.HasFixableParent) { #>
            ITGenericRepository<<#= ModelInstance.ParentName #>, int> <#= ModelInstance.ParentName.ToCamelCase() #>Repository,
<#  } #>
<#  if(ModelInstance.IsFixable) { #>
            // BIAToolKit - Begin FixedChildrenRepositoryInjection<#= ModelInstance.EntityName #>
            // BIAToolKit - End FixedChildrenRepositoryInjection<#= ModelInstance.EntityName #>
<#  } #>
            IPrincipal principal)
            : base(repository)
        {
<#  if(ModelInstance.HasCustomRepository) { #>
            this.repository = repository;
<#  } #>
<#  if(ModelInstance.HasFixableParent) { #>
            this.<#= ModelInstance.ParentName.ToCamelCase() #>Repository = <#= ModelInstance.ParentName.ToCamelCase() #>Repository;
<#  } #>
<#  if(ModelInstance.IsTeam) {  #>
            this.FiltersContext.Add(
                AccessMode.Read,
                TeamAppService.ReadSpecification<<#= ModelInstance.EntityName #>>(TeamTypeId.<#= ModelInstance.EntityName #>, principal, TeamConfig.Config));

            this.FiltersContext.Add(
                AccessMode.Update,
                TeamAppService.UpdateSpecification<<#= ModelInstance.EntityName #>, UserDataDto>(TeamTypeId.<#= ModelInstance.EntityName #>, principal));
<#  } #>
<#  if(ModelInstance.HasAncestorTeam) {  #>
            var userData = (principal as BiaClaimsPrincipal).GetUserData<UserDataDto>();
            this.currentAncestorTeamId = userData != null ? userData.GetCurrentTeamId((int)TeamTypeId.<#= ModelInstance.AncestorTeamName #>) : 0;
<#  if(!ModelInstance.IsTeam) { #>

            // For child : set the TeamId of the Ancestor that contain a team Parent
<#  if(ModelInstance.HasParent) { #>
            this.FiltersContext.Add(AccessMode.Read, new DirectSpecification<<#= ModelInstance.EntityName #>>(x => x.<#= ModelInstance.ParentName #>.<#= ModelInstance.AncestorTeamName #>Id == this.currentAncestorTeamId));
<#  } else { #>
            this.FiltersContext.Add(AccessMode.Read, new DirectSpecification<<#= ModelInstance.EntityName #>>(x => x.<#= ModelInstance.AncestorTeamName #>Id == this.currentAncestorTeamId));
<#  } #>
<#  } #>
<#  } #>
<#  if(ModelInstance.IsFixable) { #>

            // BIAToolKit - Begin FixedChildrenRepositorySet<#= ModelInstance.EntityName #>
            // BIAToolKit - End FixedChildrenRepositorySet<#= ModelInstance.EntityName #>
<#  } #>
        }
<#  if(ModelInstance.IsFixable) { #>
#pragma warning restore SA1611 // Element parameters should be documented
#pragma warning restore SA1515 // Single-line comment should be preceded by blank line

        /// <inheritdoc/>
        public override async Task<<#= ModelInstance.EntityName #>Dto> UpdateFixedAsync(<#= ModelInstance.BaseKeyType #> id, bool isFixed)
        {
            return await this.ExecuteWithFrontUserExceptionHandlingAsync(async () =>
            {
                // Update entity fixed status
                var entity = await this.Repository.GetEntityAsync(id) ?? throw new ElementNotFoundException();
                this.Repository.UpdateFixedAsync(entity, isFixed);

                // BIAToolKit - Begin UpdateFixedChildren<#= ModelInstance.EntityName #>
                // BIAToolKit - End UpdateFixedChildren<#= ModelInstance.EntityName #>
                await this.Repository.UnitOfWork.CommitAsync();
                return await this.GetAsync(id);
            });
        }
<#  } #>
<#  if(ModelInstance.HasAncestorTeam) { #>

        /// <inheritdoc/>
        public override async Task<<#= ModelInstance.EntityName #>Dto> AddAsync(<#= ModelInstance.EntityName #>Dto dto, string mapperMode = null)
        {
<#  if(!ModelInstance.IsTeam && ModelInstance.HasParent) { #>
            var <#= ModelInstance.ParentName.ToCamelCase() #>Parent = await this.<#= ModelInstance.ParentName.ToCamelCase() #>Repository.GetEntityAsync(dto.<#= ModelInstance.ParentName #>Id, isReadOnlyMode: true);
            if (<#= ModelInstance.ParentName.ToCamelCase() #>Parent.SiteId != this.currentAncestorTeamId)
            {
                throw new ForbiddenException("Can only add <#= ModelInstance.EntityName #> on current parent Team.");
            }
<#  if(ModelInstance.HasFixableParent) { #>

            if (<#= ModelInstance.ParentName.ToCamelCase() #>Parent.IsFixed)
            {
                throw new FrontUserException("<#= ModelInstance.ParentName #> parent is fixed");
            }
<#  } #>
<#  } else { #>
            if (dto.<#= ModelInstance.AncestorTeamName #>Id != this.currentAncestorTeamId)
            {
                throw new ForbiddenException("Can only add <#= ModelInstance.EntityName #> on current parent Team.");
            }
<#  } #>

            return await base.AddAsync(dto, mapperMode);
        }
<#  } #>
<#  if(!ModelInstance.IsTeam && ModelInstance.HasParent) { #>

        /// <inheritdoc/>
#pragma warning disable S1006 // Method overrides should not change parameter defaults
        public override async Task<(IEnumerable<<#= ModelInstance.EntityName #>Dto> Results, int Total)> GetRangeAsync(PagingFilterFormatDto filters = null, int id = default, Specification<<#= ModelInstance.EntityName #>> specification = null, Expression<Func<<#= ModelInstance.EntityName #>, bool>> filter = null, string accessMode = "Read", string queryMode = "ReadList", string mapperMode = null, bool isReadOnlyMode = false)
#pragma warning restore S1006 // Method overrides should not change parameter defaults
        {
            specification ??= <#= ModelInstance.EntityName #>Specification.SearchGetAll(filters);
            return await base.GetRangeAsync(filters, id, specification, filter, accessMode, queryMode, mapperMode, isReadOnlyMode);
        }

        /// <inheritdoc/>
#pragma warning disable S1006 // Method overrides should not change parameter defaults
        public override async Task<byte[]> GetCsvAsync(PagingFilterFormatDto filters = null, int id = default, Specification<<#= ModelInstance.EntityName #>> specification = null, Expression<Func<<#= ModelInstance.EntityName #>, bool>> filter = null, string accessMode = "Read", string queryMode = "ReadList", string mapperMode = null, bool isReadOnlyMode = false)
#pragma warning restore S1006 // Method overrides should not change parameter defaults
        {
            specification ??= <#= ModelInstance.EntityName #>Specification.SearchGetAll(filters);
            return await base.GetCsvAsync(filters, id, specification, filter, accessMode, queryMode, mapperMode, isReadOnlyMode);
        }
<#  } else if(ModelInstance.IsTeam) { #>

        /// <inheritdoc/>
#pragma warning disable S1006 // Method overrides should not change parameter defaults
        public override async Task<(IEnumerable<<#= ModelInstance.EntityName #>Dto> Results, int Total)> GetRangeAsync(PagingFilterFormatDto filters = null, int id = default, Specification<<#= ModelInstance.EntityName #>> specification = null, Expression<Func<<#= ModelInstance.EntityName #>, bool>> filter = null, string accessMode = "Read", string queryMode = "ReadList", string mapperMode = null, bool isReadOnlyMode = false)
#pragma warning restore S1006 // Method overrides should not change parameter defaults
        {
            specification ??= TeamAdvancedFilterSpecification<<#= ModelInstance.EntityName #>>.Filter(filters);
            return await base.GetRangeAsync(filters, id, specification, filter, accessMode, queryMode, mapperMode, isReadOnlyMode);
        }
<#  } #>
    }
}